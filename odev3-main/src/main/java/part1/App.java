/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package part1;

import java.util.ArrayList;

import static spark.Spark.get;
import static spark.Spark.port;
import static spark.Spark.post;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import javax.sound.sampled.Port;

import spark.ModelAndView;
import spark.template.mustache.MustacheTemplateEngine;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

public class App {
    public String getGreeting() {
        return "Hello world.";
    }

    public static boolean search(ArrayList<Integer> array, int sayi1,int sayi2, int sayi3) {
        System.out.println("girdilerin toplamı dizide var mı?");

        int toplam = sayi1 + sayi2 + sayi3;
        if (array == null)
            return false;
        for (int elt : array) {
            if (elt == toplam)
                return true;
        }
        return false;
    }

    public static void main(String[] args) {
        System.out.println(new App().getGreeting());

        Logger logger = LogManager.getLogger(App.class);
        logger.error("hata veriyon");

        int port = Integer.parseInt(System.getenv("PORT"));
        port(port);
        logger.error("Curret port number" + port);
        get("/", (req, res) -> "hazırladığım 3. ödevin giriş sayfasına hoşgeldiniz");
        post("/compute", (req, res) -> {
            // System.out.println(req.queryParams("input1"));
            // System.out.println(req.queryParams("input2"));
            String input1 = req.queryParams("input1");
            java.util.Scanner sc1 = new java.util.Scanner(input1);
            sc1.useDelimiter("[;\r\n]+");
            java.util.ArrayList<Integer> inputList = new java.util.ArrayList<>();
            while (sc1.hasNext()) {
                int value = Integer.parseInt(sc1.next().replaceAll("\\s", ""));
                inputList.add(value);
            }
            sc1.close();
            System.out.println(inputList);
            String input2 = req.queryParams("input2").replaceAll("\\s", "");
            int input2AsInt = Integer.parseInt(input2);
            String input3 = req.queryParams("input3").replaceAll("\\s", "");
            int input3AsInt = Integer.parseInt(input3);
            String input4 = req.queryParams("input4").replaceAll("\\s", "");
            int input4AsInt = Integer.parseInt(input4);
            boolean result = App.search(inputList, input2AsInt, input3AsInt, input4AsInt);
            Map<String, Boolean> map = new HashMap<String, Boolean>();
            map.put("result", result);
            return new ModelAndView(map, "compute.mustache");
        }, new MustacheTemplateEngine());
        get("/compute",
                (rq, rs) -> {
                    Map<String, String> map = new HashMap<String, String>();
                    map.put("result", "not computed yet!");
                    return new ModelAndView(map, "compute.mustache");
                },
                new MustacheTemplateEngine());
    }
}
